generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]
  emailAccounts EmailAccount[]
  templates     Template[]
  lists         EmailList[]
  campaigns     Campaign[]
  domains       Domain[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailAccount {
  id          String   @id @default(cuid())
  userId      String
  provider    String   // 'gmail' | 'microsoft' | 'smtp'
  address     String
  displayName String?
  meta        Json?
  dailyLimit  Int      @default(50)
  sentToday   Int      @default(0)
  lastSentAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Template {
  id        String   @id @default(cuid())
  userId    String
  name      String
  category  String
  subject   String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailList {
  id        String   @id @default(cuid())
  userId    String
  name      String
  uploaded  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  EmailListItem[]
}

model EmailListItem {
  id        String   @id @default(cuid())
  listId    String
  email     String
  firstName String?
  lastName  String?
  company   String?
  meta      Json?
  createdAt DateTime @default(now())

  list EmailList @relation(fields: [listId], references: [id], onDelete: Cascade)
  @@index([listId])
}

model Campaign {
  id          String   @id @default(cuid())
  userId      String
  name        String
  status      String   @default("Draft")
  subject     String
  content     String
  templateId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sends  Message[]
}

model Message {
  id            String   @id @default(cuid())
  userId        String
  campaignId    String?
  toEmail       String
  provider      String
  providerMsgId String?
  status        String   @default("queued") // queued|sent|bounced|opened|clicked|replied
  openCount     Int      @default(0)
  clickCount    Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign Campaign? @relation(fields: [campaignId], references: [id])
}

model Domain {
  id         String   @id @default(cuid())
  userId     String
  domain     String   @unique
  verified   Boolean  @default(false)
  token      String
  tracking   Boolean  @default(true)
  reputation Int      @default(90)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
